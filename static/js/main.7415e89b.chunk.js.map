{"version":3,"sources":["components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","key","ErrorBoundry","state","hasError","this","children","Component","Scroll","style","overflowY","border","height","SearchBox","searchField","searchChange","type","placeholder","onChange","App","fetch","then","res","json","users","setState","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","ErrorBoundary","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","logger","createLogger","store","createStore","action","Object","assign","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAiBeA,EAfF,SAACC,GAAW,IACbC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,yBAAKC,UAAU,uDACX,yBACAC,IAAG,+BAA2BF,EAA3B,YACHG,IAAI,UACJ,6BACI,4BAAML,GACN,2BAAKC,MCUNK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACI,kBAAC,EAAD,CAAMC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAK/B,OACA,6BACMO,ICMKK,E,YAlBX,WAAad,GAAQ,IAAD,8BAChB,4CAAMA,KACDe,MAAQ,CACTC,UAAU,GAHE,E,sEAQhB,OAAIC,KAAKF,MAAMC,SAEP,wDAIDC,KAAKjB,MAAMkB,a,GAhBCC,aCQZC,EARA,SAACpB,GACZ,OACI,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DxB,EAAMkB,WCWLO,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAE9B,OACI,kBAAC,WAAD,KACI,2BACIvB,UAAU,mCACVwB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCQpBI,G,kBAEF,aAAe,IAAD,8BACV,+CACKhB,MAAQ,CACTP,OAAQ,IAHF,E,iFAOO,IAAD,OAChBwB,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAU,EAAKC,SAAS,CAAE7B,OAAQ4B,S,+BAGtC,IACE5B,EAAWS,KAAKF,MAAhBP,OADH,EAEmCS,KAAKjB,MAArC0B,EAFH,EAEGA,YAAaY,EAFhB,EAEgBA,eACfC,EAAiB/B,EAAOgC,QAAO,SAAAC,GACjC,OAAOA,EAAMxC,KACRyC,cACAC,SAASjB,EAAYgB,kBAE9B,OAAKlC,EAAOoC,OAQJ,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWuB,aAAcW,IACzB,kBAAC,EAAD,KACI,kBAACO,EAAD,KACI,kBAAC,EAAD,CAAUrC,OAAS+B,OAX/B,yBAAKnC,UAAU,MACX,4C,GA1BFe,cA6CH2B,eArDS,SAAA/B,GAAK,MAAK,CAC9BW,YAAaX,EAAMW,gBAGI,SAACqB,GAAD,MAAe,CACtCT,eAAgB,SAACU,GAAD,OAAWD,ECbU,CACrCnB,KCH+B,sBDI/BqB,QDWmDD,EAAME,OAAOC,YAgDrDL,CAA6Cf,GGnDxCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAAMC,EAAe,CACjB/B,YAAa,ICQXgC,G,MAASC,0BACTC,EAAQC,aDNc,WAAoC,IAAnC9C,EAAkC,uDAA5B0C,EAAcK,EAAc,uDAAP,GACpD,OAAQA,EAAOlC,MACX,IFR2B,sBESvB,OAAOmC,OAAOC,OAAO,GAAIjD,EAAO,CAAEW,YAAaoC,EAAOb,UAC1D,QACI,OAAOlC,KCCqBkD,YAAgBP,IAExDQ,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,OAEJQ,SAASC,eAAe,SFiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.7415e89b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const { name, email, id } = props;\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img \n            src={`https://robohash.org/${ id }?100x100`} \n            alt=\"robot\"/>\n            <div>\n                <h2>{ name }</h2>\n                <p>{ email }</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    const cardComponent = robots.map((user, i) => {\n        return (\n            <Card key={i} \n                  id={robots[i].id} \n                  name={robots[i].name} \n                  email={robots[i].email}\n            />\n        );\n    });\n\n    return (\n    <div>\n        { cardComponent }\n    </div>\n    );\n}\n\nexport default CardList;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    render () {\n        if (this.state.hasError) {\n            return (\n                <h1>Oooops. This is not good</h1>\n            )\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            { props.children }\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Fragment } from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n\n    return (\n        <Fragment>\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" \n                placeholder=\"Search robots\" \n                onChange={searchChange}\n            />\n        </Fragment>\n    )\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n\nimport { setSearchField } from '../actions';\n\nconst mapStateToProps = state => ({\n    searchField: state.searchField\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n});\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            robots: []\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(res => res.json())\n            .then(users => {this.setState({ robots: users })});\n    }\n\n    render() {\n        const { robots } = this.state;\n        const { searchField, onSearchChange } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name\n                .toLowerCase()\n                .includes(searchField.toLowerCase());\n        });\n        if (!robots.length) {\n            return (\n                <div className=\"tc\">\n                    <h1>LOADING</h1>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"tc\">\n                    <h1 className=\"f1\">RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={ filteredRobots }/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants';\n\nconst initialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst store = createStore(searchRobots, applyMiddleware(logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}