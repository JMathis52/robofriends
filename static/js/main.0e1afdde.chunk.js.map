{"version":3,"sources":["components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Header.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","ErrorBoundry","props","state","hasError","this","children","Component","Header","nextProps","nextState","Scroll","style","overflowY","border","height","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundary","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e1afdde.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img \n            src={`https://robohash.org/${ id }?100x100`} \n            alt=\"robot\"/>\n            <div>\n                <h2>{ name }</h2>\n                <p>{ email }</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n    <div>\n        {\n        robots.map((user, i) => {\n            return (\n                <Card key={i} \n                      id={robots[i].id} \n                      name={robots[i].name} \n                      email={robots[i].email}\n                />\n            );\n        })\n        }\n    </div>\n    );\n}\n\nexport default CardList;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    render () {\n        if (this.state.hasError) {\n            return (\n                <h1>Oooops. This is not good</h1>\n            )\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return <h1 className=\"f1\">RoboFriends</h1>;\n  }\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            { props.children }\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Fragment } from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n\n    return (\n        <Fragment>\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" \n                placeholder=\"Search robots\" \n                onChange={searchChange}\n            />\n        </Fragment>\n    )\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestRobots, setSearchField } from '../actions';\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? (\n      <h1 className=\"tc\">LOADING</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILURE\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: REQUEST_ROBOTS_SUCCESS,\n            payload: data\n        }))\n        .catch(error => dispatch({\n            type: REQUEST_ROBOTS_FAILURE,\n            payload: error\n        }));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_FAILURE';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILURE\n} from './constants';\n\nconst initialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILURE:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}